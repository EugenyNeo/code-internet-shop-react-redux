import * as R from 'ramda'

export const getItemById =(state, id)=> R.prop(id, state.items)
export const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps)

export const getItems = (state, ownProps) =>{
  R.when(()=> true, ()=>console.log('Foo'))
  const activeCategoryId = getActiveCategoryId(ownProps)
  const applySearch =  item  => R.contains(state.itemsPage.search, item.name)

  const applyCategory = item => R.equals(
    activeCategoryId,
    R.prop('categoryId', item)
  )
  const items = R.compose(
    R.filter(applySearch),
    R.when(R.always(activeCategoryId), R.filter(applyCategory)),
    R.map(id => getItemById(state, id))
  )(state.itemsPage.ids)
 // const items = R.map(id => getItemById(state, id), state.itemsPage.ids)
  return items
}
export const getRenderedItemsLength = state => R.length(state.itemsPage.ids)

export const getTotalBasketCount = state => R.length(state.basket)

export const getTotalBasketPrice =state =>{
  const totalPrice = R.compose(
    R.sum,
    R.pluck('price'),
    R.map(id=>getItemById(state, id))
     )(state.basket)
  return totalPrice
}

export const getCategories = state => R.values(state.categories)

export const getBasketItemsWithCount = state =>{
  const itemCount = id =>R.compose(
    R.length,
    R.filter(basketId => R.equals(id, basketId))
  )(state.basket)
  const itemWithCount = item =>R.assoc('count', itemCount, item)

  const uniqIds =R.uniq(state.basket)
  const items = R.compose(
    R.map(itemWithCount),
    R.map(id =>getItemById(state,id))
  )(uniqIds)

  return items
}